// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package event

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	eventFieldNames          = builder.RawFieldNames(&Event{})
	eventRows                = strings.Join(eventFieldNames, ",")
	eventRowsExpectAutoSet   = strings.Join(stringx.Remove(eventFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	eventRowsWithPlaceHolder = strings.Join(stringx.Remove(eventFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	eventModel interface {
		Insert(ctx context.Context, data *Event) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Event, error)
		Update(ctx context.Context, data *Event) error
		Delete(ctx context.Context, id int64) error
	}

	defaultEventModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Event struct {
		Id          int64        `db:"id"`
		AggregateId string       `db:"aggregate_id"`
		EventType   string       `db:"event_type"`
		Payload     string       `db:"payload"`
		OccurredAt  time.Time    `db:"occurred_at"`
		Published   bool         `db:"published"`
		PublishedAt sql.NullTime `db:"published_at"`
	}
)

func newEventModel(conn sqlx.SqlConn) *defaultEventModel {
	return &defaultEventModel{
		conn:  conn,
		table: "`event`",
	}
}

func (m *defaultEventModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultEventModel) FindOne(ctx context.Context, id int64) (*Event, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", eventRows, m.table)
	var resp Event
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEventModel) Insert(ctx context.Context, data *Event) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, eventRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AggregateId, data.EventType, data.Payload, data.OccurredAt, data.Published, data.PublishedAt)
	return ret, err
}

func (m *defaultEventModel) Update(ctx context.Context, data *Event) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, eventRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AggregateId, data.EventType, data.Payload, data.OccurredAt, data.Published, data.PublishedAt, data.Id)
	return err
}

func (m *defaultEventModel) tableName() string {
	return m.table
}
